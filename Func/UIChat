using Photon.Chat;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class UIChat : AddressableUI, ChatSubscriber
{
    [Header("Channel")]
    [SerializeField] ToggleGroup ChannelParent;
    [SerializeField] Toggle ChannelChild;
    List<Toggle> ChannelChildList = new List<Toggle>();
    string PresentChannel;

    List<string> ChannelList = new List<string>();
    Dictionary<string, string> ChannelText = new Dictionary<string, string>();
    [SerializeField] InputField Message;
    [SerializeField] Text MessageText;

    Dictionary<string, List<ChatItem>> ChannelMassage = new Dictionary<string, List<ChatItem>>();
    List<ChatItem> channel_text_list;
    private int chat_id_number = 1;
    Queue<ChatItem> Chatitem_Queue;
    Queue<ChatItem> Chatitem_Pool;
    Queue<int> text_int;
    [SerializeField] GameObject MessagePrefab;
    [SerializeField] RectTransform MessageParent;
    [SerializeField] Button CurentChennel;
    [SerializeField] Button CommunityChennel;
    Color32 Curent_Chennel_Btn_Color;
    Color32 Other_Chennel_Btn_Color;

    private void Awake()
    {
        // Channel Toggle 관련
        ChannelChild.gameObject.SetActive(false);
        ChatManager.Instance.Subscribe(this);
        Chatitem_Pool = new Queue<ChatItem>(10);
        text_int = new Queue<int>(10);
        text_int.Enqueue(10);
        Debug.Log("Queue크기 : " + text_int.Count);
    }
    // Start is called before the first frame update
    void Start()
    {
        ChatManager.Instance.ChatAccount = "테스트중";
        Curent_Chennel_Btn_Color = new Color32(255, 255, 255, 255);
        Other_Chennel_Btn_Color = new Color32(192, 192, 192, 255);
        AddListener();
    }
    public override void OpenUI()
    {
        base.OpenUI();
    }
    public override void CloseUI()
    {
        ChatManager.Instance.UnSubscribe(this);
        base.CloseUI();
    }
    void AddListener()
    {
        CurentChennel.onClick.AddListener(OnClickCurentChennel);
        CommunityChennel.onClick.AddListener(OnClickCommunityChennel);
    }
    void OnClickCurentChennel()
    {
        CurentChennel.image.color = Curent_Chennel_Btn_Color;
        CommunityChennel.image.color = Other_Chennel_Btn_Color;
    }
    void OnClickCommunityChennel()
    {
        CurentChennel.image.color = Other_Chennel_Btn_Color;
        CommunityChennel.image.color = Curent_Chennel_Btn_Color;
    }
    public void RefreshChat()
    {
        var channelList = ChatManager.Instance.ChatChannel;
        for (int idx = 0; idx < channelList.Count; ++idx)
            AddToggle(channelList[idx]);
        ChannelChildList[0].isOn = true;
    }
    public void AddToggle(string _channel)
    {
        var newToggle = Instantiate(ChannelChild, ChannelParent.transform);
        newToggle.gameObject.SetActive(true);
        ChannelParent.RegisterToggle(newToggle);

        int channelIndex = ChannelList.Count;
        newToggle.onValueChanged.AddListener
            (
                (bool isClick) => 
                {
                    if (isClick) ClickToggle(channelIndex);
                }
            );

        string toggleText = string.Empty;
        toggleText = _channel;
        if (_channel.IndexOf('_') != -1)
            toggleText = toggleText.Substring(0,_channel.IndexOf('_'));
        newToggle.GetComponentInChildren<Text>().text = toggleText;

        ChannelChildList.Add(newToggle);
        ChannelList.Add(_channel);
        ChannelText.Add(_channel, string.Empty);
    }
    public void ClearToggle()
    {
        for (int idx = 0; idx < ChannelChildList.Count; ++idx)
            Destroy(ChannelChildList[idx].gameObject);

        ChannelText.Clear();
        ChannelChildList.Clear();
        ChannelList.Clear();
    }
    public void ClickToggle(int index)
    {
        try
        {
            PresentChannel = ChannelList[index];
            show_Channel();
        }
        catch(System.Exception e)
        {
            Debug.LogError($"[UIChat] : Channel change Error {e.Message}");
        }
    }
    void show_Channel()
    {
        MessageText.text = ChannelText[PresentChannel];

        ChatItem MessageChatItem = Instantiate(MessagePrefab, MessageParent).GetComponent<ChatItem>();
        MessageChatItem.Chat_Text.text = ChannelText[PresentChannel];
        Chatitem_Queue.Enqueue(MessageChatItem);
    }
    
    public void Send_Message()
    {
        ChatManager.Instance.SendMessage(PresentChannel, this.Message.text);
        this.Message.text = string.Empty;
    }
    public void Send_Message(string _Message)
    {
        ChatManager.Instance.SendMessage(PresentChannel, _Message);
        this.Message.text = string.Empty;
    }
    public void Send_Submit()
    {
        if (this.Message == null)
            return;

        if (Input.GetKey(KeyCode.Escape))
        {
            this.Message.text = null;
            return;
        }

        if (Input.GetKey(KeyCode.Return) || Input.GetKey(KeyCode.KeypadEnter))
            Send_Message();
    }
    public void Send_Click()
    {
        if (this.Message == null)
            return;

        Send_Message();
    }

    void ChatSubscriber.OnUpdateMessage(string channel, string sender, string message)
    {
        if(ChannelText.ContainsKey(channel))
        {
            ChannelText[channel] += $"\n{message}";
            show_Channel();
        }
        ChatItem newchenneldata = new ChatItem();
        newchenneldata.chat_num = chat_id_number;
        newchenneldata.chat_sender = sender;
        newchenneldata.Chat_Text.text = message;
        if (ChannelMassage.TryGetValue(channel, out channel_text_list))
        {
            channel_text_list.Add(newchenneldata);
        }
        else
        {
            channel_text_list = new List<ChatItem>();
            channel_text_list.Add(newchenneldata);
            ChannelMassage.Add(channel, channel_text_list);
        }
    }

    void ChatSubscriber.OnSubscribe()
    {

    }

    void ChatSubscriber.UnSubscribe()
    {

    }
}
