using ExitGames.Client.Photon;
using Photon.Chat;
using Photon.Pun;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class UIChat : AddressableUI, IChatClientListener
{
    [SerializeField] ChatMessage chatMessage;
    
    [SerializeField] InputField Message;

    [Header("Message Panel State")]
    [SerializeField] RectTransform Chat_Panel_Rect;
    [SerializeField] GameObject Abbreviation_Object;

    [Header("Message Panel Fuction")]
    [SerializeField] Button Btn_Camera;
    [SerializeField] Button Btn_Emoticon;
    [SerializeField] Button Btn_AbbreviationOn;
    [SerializeField] Button Btn_Plus;
    [SerializeField] Button Btn_Hide;
    [SerializeField] GameObject Message_Alarm_Object;

    [Header("Subscribe Channel")]
    public List<string> ChatChannel = new List<string>();
    protected internal ChatAppSettings chatAppSettings;
    string appId;
    ChatClient chatClient;

    public string username;

    private void Awake()
    {
        Hide_Message(true);
        AddListener();
        Chat_Panel_Rect.gameObject.SetActive(false);
        Abbreviation_Object.SetActive(false);
    }
    #region Button Controll
    void AddListener()
    {
        Btn_Camera.onClick.AddListener(OnClickCamera);
        Btn_Emoticon.onClick.AddListener(OnClickEmoticon);
        Btn_AbbreviationOn.onClick.AddListener(OnClickAbbreviation);
        Btn_Plus.onClick.AddListener(OnClickPlus);
        Btn_Hide.onClick.AddListener(OnClickHideButton);
    }
    void OnClickAbbreviation()
    {
        if (Message_Alarm_Object.activeSelf == true)
            Message_Alarm_Object.SetActive(false);
        Chat_Panel_Rect.gameObject.SetActive(true);
        Hide_Message(false);
        Abbreviation_Object.SetActive(true);
    }
    void OnClickHideButton()
    {
        Hide_Message(true);
    }
    void OnClickCamera()
    { }
    void OnClickEmoticon()
    { }
    void OnClickPlus()
    { }

    public void Hide_Message(bool isHide = true)
    {
        var Target = isHide ? new Vector2(-Screen.width + 40, 0) : Vector2.zero;
        StartCoroutine(Hide_Process(Target, isHide));
    }
    IEnumerator Hide_Process(Vector2 _Target, bool _IsHide)
    {
        Vector2 CurSize = Chat_Panel_Rect.sizeDelta;
        float Timer = 0;

        while (true)
        {
            Timer += Time.deltaTime;
            if (Timer >= 1)
            {
                Chat_Panel_Rect.sizeDelta = _Target;
                break;
            }
            Chat_Panel_Rect.sizeDelta = Vector2.Lerp(CurSize, _Target, Timer);
            yield return null;
        }
        if (_IsHide)
        {
            Chat_Panel_Rect.gameObject.SetActive(false);
            Abbreviation_Object.SetActive(false);
        }
    }
    #endregion
    // Start is called before the first frame update
    void Start()
    {
        setname();
        appId = PhotonNetwork.PhotonServerSettings.AppSettings.AppIdChat;
        Initialize();
    }
    void Update()
    {
        if(this.chatClient != null)
        {
            this.chatClient.Service();
        }
    }
    public ChatClient ChatClient
    {
        get
        {
            if (chatClient == null)
                Initialize();
            return chatClient;
        }
    }
    void Initialize()
    {
        this.chatClient = new ChatClient(this);
        chatClient = new ChatClient(this);
        chatClient.Connect(this.appId, "1", new AuthenticationValues(this.username));
        this.chatClient.MessageLimit = 50;
    }
    void setname()
    {
        username = Random.Range(0, 10).ToString();
        PlayerManager.Data.AvatarData.Nickname = username;
    }
    public void InitChat()
    {
        ChatChannel.Clear();
        ChatChannel.Add("test");
        ChatChannel.Add("Community");
        ChatClient.Subscribe(ChatChannel.ToArray());
        chatMessage.CurentChannel = ChatChannel[0];
    }

    #region PhotonChatCallBack
    public void DebugReturn(DebugLevel level, string message)
    {
    }

    public void OnDisconnected()
    {
        Debug.Log("접속 실패");
        Initialize();
    }

    public void OnConnected()
    {
        Debug.Log("접속 성공");
        InitChat();
        this.chatClient.SetOnlineStatus(ChatUserStatus.Online);
    }

    public void OnChatStateChange(ChatState state)
    {
    }

    public void OnGetMessages(string channelName, string[] senders, object[] messages)
    {
        Debug.Log("GetMessage");
        for(int i = 0; i < messages.Length; i++)
        {
            ChatItem newchenneldata = new ChatItem();
            string message = messages[i] as string;
            newchenneldata.SetChatData(senders[i], "[" + senders[i] + "] :" + message);
            chatMessage.MessageClassification(channelName, newchenneldata);
        }
    }

    public void OnPrivateMessage(string sender, object message, string channelName)
    {
    }

    public void OnSubscribed(string[] channels, bool[] results)
    {
        Debug.Log(string.Format("채널 입장 ({0})", string.Join(",", channels)));
    }

    public void OnUnsubscribed(string[] channels)
    {
    }

    public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
    {
    }

    public void OnUserSubscribed(string channel, string user)
    {
    }

    public void OnUserUnsubscribed(string channel, string user)
    {
    }
    #endregion
}
