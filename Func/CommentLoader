using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class CommentLoader : MonoBehaviour
{
    [SerializeField] GameObject CommentitemPrefab;
    [SerializeField] Button Btn_enter;
    [SerializeField] RectTransform CommentParent;
    [SerializeField] InputField Inputfield_comment;

    Dictionary<int, List<Comment>> Comment_Data = new Dictionary<int, List<Comment>>();
    Dictionary<int, Stack<GameObject>> Comment_Stack_Pool = new Dictionary<int, Stack<GameObject>>();
    Stack<GameObject> Comment_Stack;
    Stack<GameObject> CommentPool = new Stack<GameObject>();
    List<Comment> Parent_object;
    List<Comment> Comment_list;
    private int comment_id_number = 1;
    public int parent_top_comment_id;
    public bool comment_location_state;

    private void Start()
    {
        comment_location_state = true;
        Inputfield_comment.onValueChanged.AddListener(ObservedInputField);
        Btn_enter.onClick.AddListener(OnClickAddComment);
        Btn_enter.gameObject.SetActive(false);
    }
    void ObservedInputField(string text)
    {
        if (String.IsNullOrEmpty(text))
            Btn_enter.gameObject.SetActive(false);
        else
            Btn_enter.gameObject.SetActive(true);
    }

    public void SetRecommentBase(string mention, int parent_ID)
    {
        if (parent_top_comment_id != parent_ID)
        {
            Inputfield_comment.text = mention;
            parent_top_comment_id = parent_ID;
            comment_location_state = false;
        }
        else
        {
            Inputfield_comment.text = string.Empty;
            parent_top_comment_id = 0;
            comment_location_state = true;
        }
    }
    /// <summary>
    /// 데이터를 읽어오는 구문. 형식 및 초기화는 Struct 확인 후 추가 구현 및 변경 필요.(수신부)
    /// </summary>
    /// <param name="newcomment"></param>
    public void GetRecommentData(CommunityInfo.reply[] newcomment)
    {
        for (int i = 0; i < newcomment.Length; i++)
        {
            Comment newcommented = PopCommentPool().GetComponent<Comment>();
            if (newcomment[i].top_comment_id == 0)
            {
                newcommented.SetCommentData(newcomment[i]);
                Comment_list = new List<Comment>();
                Comment_list.Add(newcommented);
                Comment_Data.Add(newcomment[i].id, Comment_list);
                newcommented.gameObject.SetActive(true);
            }
            else
            {
                Comment_list = Comment_Data[parent_top_comment_id];
                Comment_list.Add(newcommented);
                Parent_object[0].SetReCommentCount(Comment_list.Count - 1);
                newcommented.SetCommentData(newcomment[i], Parent_object[0].gameObject.transform.GetSiblingIndex());
                newcommented.gameObject.SetActive(false);
            }
            comment_id_number++;
        }
    }

    /// <summary>
    /// 해당 댓글의 대댓글 데이터를 가져와서 오브젝트에 데이터를 할당 및 회수 하는 구문.
    /// </summary>
    /// <param name="parentindex"> : Top_comment_ID</param>
    /// <param name="state"> : 대댓글 활성화 유무 true : 댓글보기 false : 댓글닫기</param>
    public void SetRcommentDIsplay(int parentindex, bool state)
    {
        if (Comment_Data.TryGetValue(parentindex, out Comment_list))
        {
            for (int i = 1; i < Comment_list.Count; i++)
            {
                if (state)
                {
                    Comment newcommented = PopCommentPool().GetComponent<Comment>();
                    Parent_object = Comment_Data[parentindex];
                    newcommented.SetCommentData(Comment_list[Comment_list.Count - i].thiscomment, Parent_object[0].gameObject.transform.GetSiblingIndex());

                    if (Comment_Stack_Pool.TryGetValue(parentindex, out Comment_Stack))
                    {
                        Comment_Stack.Push(newcommented.gameObject);
                    }
                    else
                    {
                        Comment_Stack = new Stack<GameObject>();
                        Comment_Stack.Push(newcommented.gameObject);
                        Comment_Stack_Pool.Add(parentindex, Comment_Stack);
                    }
                    newcommented.gameObject.SetActive(true);
                    LayoutRebuilder.ForceRebuildLayoutImmediate(newcommented.gameObject.GetComponent<RectTransform>());
                }
                else
                {
                    if (Comment_Stack_Pool.TryGetValue(parentindex, out Comment_Stack))
                    {
                        Comment newcommented = Comment_Stack.Pop().GetComponent<Comment>();
                        Comment_list[i].thiscomment = newcommented.thiscomment;
                        newcommented.gameObject.SetActive(false);
                        newcommented.gameObject.transform.SetAsLastSibling();
                        CommentPool.Push(newcommented.gameObject);
                    }
                }
            }
        }
    }
    /// <summary>
    /// 댓글 데이터를 추가 구문.(전송부)
    /// </summary>
    public void OnClickAddComment()
    {
        CommunityInfo.reply newcomment = new CommunityInfo.reply();
        newcomment.id = comment_id_number;
        newcomment.nickname = "호랑이";
        newcomment.cmt_txt = Inputfield_comment.text;
        newcomment.reg_dtm = DateTime.Now.ToString("HHmmss");
        newcomment.like_yn = false;
        Comment newcommented;
        if (comment_location_state)
        {
            newcommented = PopCommentPool().GetComponent<Comment>();
            newcommented.SetCommentData(newcomment);
            Comment_list = new List<Comment>();
            Comment_list.Add(newcommented);
            Comment_Data.Add(newcomment.id, Comment_list);
            newcommented.transform.SetAsFirstSibling();
            newcommented.gameObject.SetActive(true);
            LayoutRebuilder.ForceRebuildLayoutImmediate(newcommented.gameObject.GetComponent<RectTransform>());
        }
        else
        {
            Parent_object = Comment_Data[parent_top_comment_id];
            newcomment.top_comment_id = parent_top_comment_id;
            newcommented = new Comment();
            newcommented.thiscomment = newcomment;
            if (Parent_object[0].recommentactivestate == true)
            {
                Comment copy_comment = PopCommentPool().GetComponent<Comment>();
                copy_comment.SetCommentData(newcomment, Parent_object[0].gameObject.transform.GetSiblingIndex());
                if (Comment_Stack_Pool.TryGetValue(parent_top_comment_id, out Comment_Stack))
                {
                    Comment comment_copy = new Comment();
                    Comment_Stack.Push(copy_comment.gameObject);
                }

                copy_comment.gameObject.SetActive(true);
                LayoutRebuilder.ForceRebuildLayoutImmediate(copy_comment.gameObject.GetComponent<RectTransform>());
            }
            Comment_list = Comment_Data[parent_top_comment_id];
            Comment_list.Add(newcommented);
            Parent_object[0].SetReCommentCount(Comment_list.Count - 1);

            parent_top_comment_id = 0;
            comment_location_state = true;
        }
        Inputfield_comment.text = string.Empty;
        comment_id_number++;
    }

    GameObject PopCommentPool()
    {
        if (CommentPool.Count > 0)
            return CommentPool.Pop();
        else
        {
            GameObject newcommented = Instantiate(CommentitemPrefab, CommentParent);
            return newcommented;
        }
    }
}
