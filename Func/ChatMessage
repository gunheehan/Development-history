using Photon.Chat;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class ChatMessage : MonoBehaviour
{
    [SerializeField] UIChat UIchat;

    [Header("ChannelMessage")]
    [SerializeField] InputField Message_Field;
    [SerializeField] int ChatItem_Queue_Size = 10;

    Dictionary<string, List<ChatItem>> ChannelMassage = new Dictionary<string, List<ChatItem>>();
    List<ChatItem> channel_text_list;
    ChatItem[] ChatItem_Circle_Queue;
    Stack<GameObject> ChatItem_Pool;
    int chatitem_index_front = 0;
    int chatitem_index_rear = 0;

    [Header("ReferenceObject")]
    [SerializeField] GameObject MessagePrefab;
    [SerializeField] RectTransform MessageParent;
    [SerializeField] GameObject Message_Alarm;
    [SerializeField] GameObject Chat_Panel;
    [SerializeField] Button Btn_SendMessage;

    [Header("ChannelButton")]
    [SerializeField] Button Btn_CurentChennel;
    [SerializeField] Button Btn_CommunityChennel;
    Color32 Curent_Chennel_Btn_Color;
    Color32 Other_Chennel_Btn_Color;

    [Header("ChannelLoadData")]
    public string CurentChannel = "test";
    [SerializeField] int MessageLoadSize = 5;
    int front_num;
    int back_num;
    int load_num_index;
    bool scroll_load_ing = false;


    private void Awake()
    {
        ChatItem_Circle_Queue = new ChatItem[ChatItem_Queue_Size];
        ChatItem_Pool = new Stack<GameObject>();
    }
    // Start is called before the first frame update
    void Start()
    {
        Curent_Chennel_Btn_Color = new Color32(255, 255, 255, 255);
        Other_Chennel_Btn_Color = new Color32(192, 192, 192, 255);
        Btn_SendMessage.gameObject.SetActive(true);
        //Btn_CurentChennel.image.color = Curent_Chennel_Btn_Color;
        //Btn_CommunityChennel.image.color = Other_Chennel_Btn_Color;
        AddListener();
    }
    void AddListener()
    {
        Btn_CurentChennel.onClick.AddListener(OnClickCurentChennel);
        Btn_CommunityChennel.onClick.AddListener(OnClickCommunityChennel);
        Btn_SendMessage.onClick.AddListener(() => OnClickSendMessage());
        Message_Field.onValueChanged.AddListener(ObservedInputField);
        //Message_Field.onEndEdit.AddListener(text => OnclickMobileInputFieldDone());
    }
    void OnClickCurentChennel()
    {
        Btn_CurentChennel.image.color = Curent_Chennel_Btn_Color;
        Btn_CommunityChennel.image.color = Other_Chennel_Btn_Color;

        if(ChannelMassage.ContainsKey(CurentChannel))
        {
            channel_text_list = ChannelMassage[CurentChannel];
            if (channel_text_list.Count > 0)
            {
                ResetMessageQueuePool();
                CurentChannel = "test";
                ResetMessageQueue();
            }
        }

        CurentChannel = "test";
    }
    void OnClickCommunityChennel()
    {
        Btn_CurentChennel.image.color = Other_Chennel_Btn_Color;
        Btn_CommunityChennel.image.color = Curent_Chennel_Btn_Color;

        if (ChannelMassage.ContainsKey(CurentChannel))
        {
            channel_text_list = ChannelMassage[CurentChannel];
            if (channel_text_list.Count > 0)
            {
                ResetMessageQueuePool();
                CurentChannel = "Community";
                ResetMessageQueue();
            }
        }
        CurentChannel = "Community";
    }
    public void OnClickSendMessage(string newmessage = null)
    {
        if (string.IsNullOrEmpty(Message_Field.text) && string.IsNullOrEmpty(newmessage))
            return;
        if (Message_Alarm.activeSelf == false && Chat_Panel.activeSelf == false)
            Message_Alarm.SetActive(true);
        ChatItem newitme = new ChatItem();
        if(string.IsNullOrEmpty(newmessage))
        {
            //newitme.SetChatData("고라니", " [UserID] : " + Message_Field.text);
            UIchat.ChatClient.PublishMessage(CurentChannel, Message_Field.text);
            Message_Field.text = string.Empty;
        }
        else
        {
            //newitme.SetChatData("고라니", " [UserID] : " + newmessage);
            UIchat.ChatClient.PublishMessage(CurentChannel, newmessage);
        }
        //MessageClassification(CurentChannel, newitme);
    }
    void ObservedInputField(string text)
    {
        if (String.IsNullOrEmpty(text))
            Btn_SendMessage.gameObject.SetActive(false);
        else
            Btn_SendMessage.gameObject.SetActive(true);
    }
    void OnclickMobileInputFieldDone()
    {
        if (Message_Field.touchScreenKeyboard.status == TouchScreenKeyboard.Status.Done)
        {
            Debug.Log("Enter");
            OnClickSendMessage();
        }
    }
    void ResetMessageQueue()
    {
        scroll_load_ing = false;

        channel_text_list = ChannelMassage[CurentChannel];
        int load_num;
        if (channel_text_list.Count > ChatItem_Queue_Size)
            load_num = channel_text_list.Count - ChatItem_Queue_Size;
        else
            load_num = 0;
        for (int i = load_num; i < channel_text_list.Count; i++)
        {
            SetChatItme(channel_text_list[i]);
            ChatItem_Circle_Queue[chatitem_index_rear].gameObject.transform.SetAsLastSibling();
        }
    }
    void ResetMessageQueuePool()
    {
        chatitem_index_front = 0;
        chatitem_index_rear = 0;
        channel_text_list = ChannelMassage[CurentChannel];
        int reset_size;
        if (channel_text_list.Count > ChatItem_Queue_Size)
            reset_size = ChatItem_Queue_Size;
        else
            reset_size = channel_text_list.Count;
        if(!(channel_text_list.Count <= 0))
        {
            for (int i = 0; i < reset_size; i++)
            {
                ChatItem_Circle_Queue[i].gameObject.SetActive(false);
                ChatItem_Circle_Queue[i].gameObject.transform.SetAsFirstSibling();
                ChatItem_Pool.Push(ChatItem_Circle_Queue[i].gameObject);
            }
            chatitem_index_rear = 0;
        }
    }
    public void MessageClassification(string channelname, ChatItem channeldata)
    {
        if(channelname.Equals(CurentChannel))
        {
            if (ChannelMassage.TryGetValue(CurentChannel, out channel_text_list))
            {
                channeldata.chat_num = channel_text_list[channel_text_list.Count - 1].chat_num + 1;
                channel_text_list.Add(channeldata);
            }
            else
            {
                channel_text_list = new List<ChatItem>();
                channeldata.chat_num = 1;
                channel_text_list.Add(channeldata);
                ChannelMassage.Add(CurentChannel, channel_text_list);
            }
            SetChatItme(channeldata);
        }
        else
        {
            if(UIchat.ChatChannel.Contains(channelname))
            {
                if (ChannelMassage.TryGetValue(channelname, out channel_text_list))
                {
                    channeldata.chat_num = channel_text_list[channel_text_list.Count - 1].chat_num + 1;
                    channel_text_list.Add(channeldata);
                }
                else
                {
                    channel_text_list = new List<ChatItem>();
                    channeldata.chat_num = 1;
                    channel_text_list.Add(channeldata);
                    ChannelMassage.Add(CurentChannel, channel_text_list);
                }
            }
        }
    }
    void SetChatItme(ChatItem newMessage)
    {
        if (!scroll_load_ing)
        {
            if ((chatitem_index_rear + 1) % ChatItem_Queue_Size == chatitem_index_front % ChatItem_Queue_Size)
            {
                if (!ChatItem_Circle_Queue[chatitem_index_front])
                {
                    ChatItem_Circle_Queue[chatitem_index_front] = PopChatMessagePool().GetComponent<ChatItem>();
                    ChatItem_Circle_Queue[chatitem_index_front].chat_num = newMessage.chat_num;
                    ChatItem_Circle_Queue[chatitem_index_front].SetChatData(newMessage.chat_sender, newMessage.chat_message);
                }
                ChatItem_Circle_Queue[chatitem_index_front].gameObject.SetActive(false);
                ChatItem_Circle_Queue[chatitem_index_front].gameObject.transform.SetAsLastSibling();
                ChatItem_Pool.Push(ChatItem_Circle_Queue[chatitem_index_front].gameObject);
                chatitem_index_front = (chatitem_index_front + 1) % ChatItem_Queue_Size;
                chatitem_index_rear = (chatitem_index_rear + 1) % ChatItem_Queue_Size;
            }
            else
            {
                chatitem_index_rear = (chatitem_index_rear + 1) % ChatItem_Queue_Size;
            }
            ChatItem_Circle_Queue[chatitem_index_rear] = PopChatMessagePool().GetComponent<ChatItem>();
            ChatItem_Circle_Queue[chatitem_index_rear].chat_num = newMessage.chat_num;
            ChatItem_Circle_Queue[chatitem_index_rear].SetChatData(newMessage.chat_sender, newMessage.chat_message);
            ChatItem_Circle_Queue[chatitem_index_rear].gameObject.SetActive(true);
            LayoutRebuilder.ForceRebuildLayoutImmediate(MessageParent.gameObject.GetComponent<RectTransform>());
        }
    }
    public void BeforeMessageLoad()
    {
        channel_text_list = ChannelMassage[CurentChannel];

        front_num = chatitem_index_rear;
        back_num = chatitem_index_front;
        load_num_index = ChatItem_Circle_Queue[back_num].chat_num - 1;
        
        if (front_num < 0)
            front_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
        if (back_num < 0)
            back_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
        if (load_num_index > 0)
            scroll_load_ing = true;

        for (int i = 0; i < MessageLoadSize; i++)
        {
            load_num_index--;
            if (!(load_num_index < 0))
            {
                ChatItem_Circle_Queue[front_num].gameObject.SetActive(false);
                ChatItem_Circle_Queue[front_num].gameObject.transform.SetAsFirstSibling();
                ChatItem_Pool.Push(ChatItem_Circle_Queue[front_num].gameObject);

                front_num = (front_num - 1) % ChatItem_Queue_Size;
                back_num = (back_num - 1) % ChatItem_Queue_Size;
                if (front_num < 0)
                    front_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
                if (back_num < 0)
                    back_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
                
                ChatItem_Circle_Queue[back_num] = PopChatMessagePool().GetComponent<ChatItem>();
                ChatItem_Circle_Queue[back_num].chat_num = channel_text_list[load_num_index].chat_num;
                ChatItem_Circle_Queue[back_num].SetChatData(channel_text_list[load_num_index].chat_sender, channel_text_list[load_num_index].chat_message);
                ChatItem_Circle_Queue[back_num].gameObject.SetActive(true);
            }
        }
        chatitem_index_front = back_num;
        chatitem_index_rear = front_num;
        LayoutRebuilder.ForceRebuildLayoutImmediate(MessageParent.gameObject.GetComponent<RectTransform>());
    }
    public void AfterMessageLoad()
    {
        channel_text_list = ChannelMassage[CurentChannel];
        int message_size = channel_text_list.Count;
        front_num = chatitem_index_rear;
        back_num = chatitem_index_front;
        load_num_index = ChatItem_Circle_Queue[front_num].chat_num;

        for (int i = 0; i < MessageLoadSize; i++)
        {
            if (load_num_index < message_size)
            {
                ChatItem_Circle_Queue[back_num].gameObject.SetActive(false);
                ChatItem_Circle_Queue[back_num].gameObject.transform.SetAsLastSibling();
                ChatItem_Pool.Push(ChatItem_Circle_Queue[back_num].gameObject);

                front_num = (front_num + 1) % ChatItem_Queue_Size;
                back_num = (back_num + 1) % ChatItem_Queue_Size;

                ChatItem_Circle_Queue[front_num] = PopChatMessagePool().GetComponent<ChatItem>();
                ChatItem_Circle_Queue[front_num].chat_num = channel_text_list[load_num_index].chat_num;
                ChatItem_Circle_Queue[front_num].SetChatData(channel_text_list[load_num_index].chat_sender, channel_text_list[load_num_index].chat_message);
                ChatItem_Circle_Queue[front_num].gameObject.SetActive(true);
            }
            load_num_index++;
        }
        if (load_num_index >= message_size)
            scroll_load_ing = false;
        chatitem_index_front = back_num;
        chatitem_index_rear = front_num; 
        LayoutRebuilder.ForceRebuildLayoutImmediate(MessageParent.gameObject.GetComponent<RectTransform>());
    }
    GameObject PopChatMessagePool()
    {
        if (ChatItem_Pool.Count > 0)
            return ChatItem_Pool.Pop();
        else
        {
            GameObject newMessage = Instantiate(MessagePrefab, MessageParent);
            return newMessage;
        }
    }
}
