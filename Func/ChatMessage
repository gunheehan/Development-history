using Photon.Chat;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class ChatMessage : MonoBehaviour
{
    [SerializeField] InputField Message;

    Dictionary<string, List<ChatItem>> ChannelMassage = new Dictionary<string, List<ChatItem>>();
    List<ChatItem> channel_text_list;
    ChatItem[] ChatItem_Circle_Queue;
    Stack<GameObject> ChatItem_Pool;
    [SerializeField]const int ChatItem_Queue_Size = 10;
    int chatitem_index_front = 0;
    int chatitem_index_rear = 0;
    int message_load_index;
    [SerializeField] GameObject MessagePrefab;
    [SerializeField] RectTransform MessageParent;
    [SerializeField] Button Btn_CurentChennel;
    [SerializeField] Button Btn_CommunityChennel;
    [SerializeField] GameObject Message_Alarm;
    [SerializeField] GameObject Chat_Panel;
    Color32 Curent_Chennel_Btn_Color;
    Color32 Other_Chennel_Btn_Color;
    int message_unique_number = 1;
    int quarter_index;

    [SerializeField] Button Btn_SendMessage;

    private void Awake()
    {
        ChatItem_Circle_Queue = new ChatItem[ChatItem_Queue_Size];
        ChatItem_Pool = new Stack<GameObject>();
    }
    // Start is called before the first frame update
    void Start()
    {
        Curent_Chennel_Btn_Color = new Color32(255, 255, 255, 255);
        Other_Chennel_Btn_Color = new Color32(192, 192, 192, 255);
        AddListener();
    }
    void AddListener()
    {
        Btn_CurentChennel.onClick.AddListener(OnClickCurentChennel);
        Btn_CommunityChennel.onClick.AddListener(OnClickCommunityChennel);
        Btn_SendMessage.onClick.AddListener(()=> OnClickSendMessage());
    }
    void OnClickCurentChennel()
    {
        Btn_CurentChennel.image.color = Curent_Chennel_Btn_Color;
        Btn_CommunityChennel.image.color = Other_Chennel_Btn_Color;
    }
    void OnClickCommunityChennel()
    {
        Btn_CurentChennel.image.color = Other_Chennel_Btn_Color;
        Btn_CommunityChennel.image.color = Curent_Chennel_Btn_Color;
    }
    public void OnClickSendMessage(string newmessage = null)
    {
        if (string.IsNullOrEmpty(Message.text) && string.IsNullOrEmpty(newmessage))
            return;
        if (Message_Alarm.activeSelf == false && Chat_Panel.activeSelf == false)
            Message_Alarm.SetActive(true);
        ChatItem testitme = new ChatItem();
        if(string.IsNullOrEmpty(newmessage))
        {
            testitme.SetChatData("고라니", " [UserID]" + Message.text);
            Message.text = string.Empty;
        }
        else
            testitme.SetChatData("고라니", " [UserID]" + newmessage);

        SetChatItme(testitme);
    }
    /// <summary>
    /// 현재 열려있는 채팅창의 Message에 대한 ObjectFull
    /// </summary>
    /// <param name="newMessage"></param>
    public void SetChatItme(ChatItem newMessage)
    {
        newMessage.chat_num = message_unique_number;
        string channel = "test";
        if (ChannelMassage.TryGetValue(channel, out channel_text_list))
        {
            channel_text_list.Add(newMessage);
        }
        else
        {
            channel_text_list = new List<ChatItem>();
            channel_text_list.Add(newMessage);
            ChannelMassage.Add(channel, channel_text_list);
        }

        if ((chatitem_index_rear + 1) % ChatItem_Queue_Size == chatitem_index_front % ChatItem_Queue_Size)
        {
            if(!ChatItem_Circle_Queue[chatitem_index_front])
            {
                ChatItem_Circle_Queue[chatitem_index_front] = PopChatPool().GetComponent<ChatItem>();
                ChatItem_Circle_Queue[chatitem_index_front].chat_num = message_unique_number;
                ChatItem_Circle_Queue[chatitem_index_front].SetChatData(newMessage.chat_sender, newMessage.chat_num + newMessage.chat_message);
            }
            ChatItem_Circle_Queue[chatitem_index_front].gameObject.SetActive(false);
            ChatItem_Circle_Queue[chatitem_index_front].gameObject.transform.SetAsLastSibling();
            ChatItem_Pool.Push(ChatItem_Circle_Queue[chatitem_index_front].gameObject);
            chatitem_index_front = (chatitem_index_front + 1) % ChatItem_Queue_Size;
            chatitem_index_rear = (chatitem_index_rear + 1) % ChatItem_Queue_Size;
        }
        else
        {
            chatitem_index_rear = (chatitem_index_rear + 1) % ChatItem_Queue_Size;
        }
        ChatItem_Circle_Queue[chatitem_index_rear] = PopChatPool().GetComponent<ChatItem>();
        ChatItem_Circle_Queue[chatitem_index_rear].chat_num = message_unique_number;
        ChatItem_Circle_Queue[chatitem_index_rear].SetChatData(newMessage.chat_sender, newMessage.chat_num + newMessage.chat_message);
        ChatItem_Circle_Queue[chatitem_index_rear].gameObject.SetActive(true);

        message_unique_number++;
    }
    public void BeforeMessageLoad()
    {
        string channel = "test";
        channel_text_list = ChannelMassage[channel];

        int front_num = chatitem_index_rear;
        int back_num = chatitem_index_front;
        int back_num_index = ChatItem_Circle_Queue[back_num].chat_num - 1;
        
        if (front_num < 0)
            front_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
        if (back_num < 0)
            back_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
        
        for (int i = 0; i < 5; i++)
        {
            int beforeindex = quarter_index % ChatItem_Queue_Size;
            back_num_index--;

            if (!(back_num_index < 0))
            {
                ChatItem_Circle_Queue[front_num].gameObject.SetActive(false);
                ChatItem_Circle_Queue[front_num].gameObject.transform.SetAsFirstSibling();
                ChatItem_Pool.Push(ChatItem_Circle_Queue[front_num].gameObject);

                front_num = (front_num - 1) % ChatItem_Queue_Size;
                back_num = (back_num - 1) % ChatItem_Queue_Size;
                if (front_num < 0)
                    front_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
                if (back_num < 0)
                    back_num = (ChatItem_Queue_Size - 1) % ChatItem_Queue_Size;
                
                ChatItem_Circle_Queue[back_num] = PopChatPool().GetComponent<ChatItem>();
                ChatItem_Circle_Queue[back_num].chat_num = channel_text_list[back_num_index].chat_num;
                ChatItem_Circle_Queue[back_num].SetChatData(channel_text_list[back_num_index].chat_sender, channel_text_list[back_num_index].chat_message);
                ChatItem_Circle_Queue[back_num].gameObject.SetActive(true);
            }
        }
        chatitem_index_front = back_num;
        chatitem_index_rear = front_num;
    }
    GameObject PopChatPool()
    {
        if (ChatItem_Pool.Count > 0)
            return ChatItem_Pool.Pop();
        else
        {
            GameObject newMessage = Instantiate(MessagePrefab, MessageParent);
            return newMessage;
        }
    }
}
