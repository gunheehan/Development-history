using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class ChatAbbreviationScroll : MonoBehaviour, IBeginDragHandler, IEndDragHandler
{
    [SerializeField] CanvasScaler RootObject_CanvasScaler;
    [SerializeField] RectTransform ScrollRootImage;
    [SerializeField] GameObject abbreviation_item_Prefab;
    [SerializeField] Transform Abbreviation_Item_Parent;
    [SerializeField] Transform Discernment_Item_Parent;
    [SerializeField] GameObject discernment_Prefab;

    [SerializeField] HorizontalLayoutGroup contents_Horizontal;
    [SerializeField] int ViewItemCount = 4;

    AbbreviationItem[] abbreviation_item;
    Image[] discernment_img;
    Color32 Curent_Page_Color;
    Color32 Other_Page_Color;

    string[] abbreciation = new string[] { "ㅇ모ㅇ모", "아o유", "안녕!", "ㅋㅋㅋㅋ", "놀자", "좋아!", "싫어", "고마워:)","222222놀자", "좋아!", "2222222싫어", "2고마워:)" };

    Vector2 StartDragingPos;
    int pagesize;
    int pagenum = 0;
    float Layout_Preferred_size;
    bool isDrag = false;

    void Start()
    {
        Curent_Page_Color = new Color32(19, 19, 19, 255);
        Other_Page_Color = new Color32(189, 189, 189, 255);
        Abbreviation_Canvas_Resolution();
        Setabbreviation();
    }

    void Abbreviation_Canvas_Resolution()
    {
        float widthRatio = Screen.width / RootObject_CanvasScaler.referenceResolution.x;
        float heightratio = Screen.height / RootObject_CanvasScaler.referenceResolution.y;

        float ratio = widthRatio * (1f - RootObject_CanvasScaler.matchWidthOrHeight) + heightratio * (RootObject_CanvasScaler.matchWidthOrHeight);

        float pixelwidth = ScrollRootImage.rect.width * ratio;
        float padding_size = (contents_Horizontal.padding.left + contents_Horizontal.padding.right + (contents_Horizontal.spacing * (ViewItemCount - 1))) * ratio;

        Layout_Preferred_size = (pixelwidth - padding_size) / (ViewItemCount + 1);
    }
    void Setabbreviation()
    {
        pagesize = abbreciation.Length / ViewItemCount;
        abbreviation_item = new AbbreviationItem[ViewItemCount];
        discernment_img = new Image[pagesize];

        for (int i = 0; i < ViewItemCount; i++)
        {
            abbreviation_item[i] = Instantiate(abbreviation_item_Prefab, Abbreviation_Item_Parent).GetComponent<AbbreviationItem>();
            abbreviation_item[i].gameObject.SetActive(true);
        }

        for (int i = 0; i < pagesize; i++)
        {
            discernment_img[i] = Instantiate(discernment_Prefab, Discernment_Item_Parent).GetComponent<Image>();
            if (i == 0)
                discernment_img[i].color = Curent_Page_Color;


            else
                discernment_img[i].color = Other_Page_Color;

            discernment_img[i].gameObject.SetActive(true);
            LayoutRebuilder.ForceRebuildLayoutImmediate(discernment_img[i].rectTransform);
        }
        SetabbreviationData();
    }

    void SetabbreviationData()
    {
        for (int i = 0; i < ViewItemCount; i++)
        {
            abbreviation_item[i].ItemLayoutElement.enabled = false;
            abbreviation_item[i].ItemComment.text = abbreciation[i + (pagenum * ViewItemCount)];
            abbreviation_item[i].ItemLayoutElement.preferredWidth = Layout_Preferred_size;

            LayoutRebuilder.ForceRebuildLayoutImmediate(abbreviation_item[i].ItemComment.rectTransform);
            LayoutRebuilder.ForceRebuildLayoutImmediate(abbreviation_item[i].Item_Img.rectTransform);
            if (abbreviation_item[i].Item_Img.rectTransform.rect.width > Layout_Preferred_size)
            {
                abbreviation_item[i].ItemLayoutElement.enabled = true;
                LayoutRebuilder.ForceRebuildLayoutImmediate(abbreviation_item[i].Item_Img.rectTransform);

                Debug.Log("True : " + abbreviation_item[i].name + " => "+ abbreviation_item[i].Item_Img.rectTransform.rect.width + ">" + Layout_Preferred_size);
            }
        }
    }

    public void OnBeginDrag(PointerEventData eventData)
    {
        StartDragingPos = eventData.position;
    }

    public void OnEndDrag(PointerEventData eventData)
    {
        isDrag = false;
        SetPos(eventData.position.x);
    }

    void SetPos(float Xpos)
    {
        if (Xpos < StartDragingPos.x)
        {
            if(pagenum < pagesize - 1)
            {
                discernment_img[pagenum].color = Other_Page_Color;
                pagenum++;
                discernment_img[pagenum].color = Curent_Page_Color;
                SetabbreviationData();
            }
        }
        else if (Xpos >= StartDragingPos.x)
        {
            if(pagenum != 0)
            {
                discernment_img[pagenum].color = Other_Page_Color;
                pagenum--;
                discernment_img[pagenum].color = Curent_Page_Color;
                SetabbreviationData();
            }
        }
    }
}
