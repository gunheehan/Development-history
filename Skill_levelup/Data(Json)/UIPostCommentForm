using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class UIPostCommentForm : MonoBehaviour
{
    [SerializeField] private UIPostComment postcommentmanagement;
    [SerializeField] private Button Btn_profile;
    [SerializeField] private Button Btn_nickname;
    [SerializeField] private Button Btn_recomment;
    [SerializeField] private Button Btn_like;
    [SerializeField] private Button Btn_unlike;
    [SerializeField] private Button Btn_express_answer;
    [SerializeField] private Button Btn_blind_anser;
    [SerializeField] private Button Btn_Report;
    [SerializeField] private Button Btn_Delete;

    [SerializeField] private Image img_profile;
    [SerializeField] private Text nickname;
    [SerializeField] private Text animal_nickname;
    [SerializeField] private Text time;
    [SerializeField] private Text comment;
    [SerializeField] private Text like;
    [SerializeField] private Text comment_count;
    [SerializeField] private Text express_answer_list;
    [SerializeField] private InputField contents;
    [SerializeField] private RectTransform RecommentParent;

    [SerializeField] private GameObject RecommentPrefab;

    private string username;
    private float uploadtime;
    private short like_count;
    private bool state = true;

    List<CommentInfo> recomment_list;
    List<GameObject> recomment_object_list = new List<GameObject>(); // 댓글 오브젝트를 관리할 변수
    public void Start()
    {
        Btn_unlike.gameObject.SetActive(false);
        Btn_express_answer.gameObject.SetActive(false);
        Btn_blind_anser.gameObject.SetActive(false);
        SetLitsener();
    }

    public void SetCommentData(CommentInfo info, Dictionary<string, List<CommentInfo>> recommentinfo = null)
    {
        nickname.text = info.nickname;
        animal_nickname.text = info.animal_nickname;
        time.text = ElapsedTime(info.uploadtime) + "전";
        comment.text = info.comment;
        like.text = "좋아요 " + info.like_count.ToString();
        comment_count.text = "댓글쓰기";

        username = info.nickname;
        uploadtime = info.uploadtime;
        like_count = info.like_count;
    }

    private string ElapsedTime(float time)
    {
        int[] clock = new int[3];
        time -= float.Parse(DateTime.Now.ToString("HHmmss"));
        time *= -1;
        clock[0] = ((int)time / 3600);
        clock[1] = ((int)time / 60 % 60);
        clock[2] = ((int)time % 60);

        if (clock[0] != 0)
        {
            if (clock[0] >= 24)
                return clock[0] / 24 + "일";
            else
                return clock[0] + "시간";
        }
        else if (clock[1] != 0)
        {
            return clock[1] + "분";
        }
        else
            return clock[2] + "초";
    }

    private void SetLitsener()
    {
        Btn_profile.onClick.AddListener(OnClickProfileORNickname);
        Btn_nickname.onClick.AddListener(OnClickProfileORNickname);
        Btn_recomment.onClick.AddListener(OnClickRecomment);
        Btn_like.onClick.AddListener(OnClickLike);
        Btn_unlike.onClick.AddListener(OnClickUnLike);
        Btn_express_answer.onClick.AddListener(OnClickExpressAnswerList);
        Btn_blind_anser.onClick.AddListener(OnClickBlindAnserList);
        Btn_Report.onClick.AddListener(OnClickReport);
        Btn_Delete.onClick.AddListener(OnClickDelete);
    }

    public void OnClickAddReComment()
    {
        CommentInfo newrecomment = new CommentInfo();
        newrecomment.nickname = "고양이";
        newrecomment.comment = contents.text;
        newrecomment.uploadtime = float.Parse(DateTime.Now.ToString("HHmmss"));
        UIPostReCommentForm newrecommented = Instantiate(RecommentPrefab,RecommentParent).GetComponent<UIPostReCommentForm>();
        newrecommented.SetCommentData(newrecomment, this);
        
        recomment_object_list.Add(newrecommented.gameObject);
        if(Btn_express_answer.gameObject.activeSelf == false && Btn_blind_anser.gameObject.activeSelf == false)
        {
            Btn_express_answer.gameObject.SetActive(true);
            express_answer_list.text = "... 답글" + recomment_object_list.Count.ToString() + "개 모두 보기";
        }
        else if(Btn_express_answer.gameObject.activeSelf == true)
        {
            express_answer_list.text = "... 답글" + recomment_object_list.Count.ToString() + "개 모두 보기";
        }
        else
        {
            newrecommented.gameObject.SetActive(true);
        }
        contents.text = string.Empty;
    }
    private void OnClickProfileORNickname()
    {
        // 다이어리 페이지 출력 연결
        Debug.Log("다이어리");
    }
    private void OnClickExpressAnswerList()
    {
        if (recomment_object_list.Count > 0)
        {
            foreach (GameObject recomment in recomment_object_list)
                recomment.SetActive(true);
        }
        Btn_express_answer.gameObject.SetActive(false);
        Btn_blind_anser.gameObject.SetActive(true);
    }
    private void OnClickBlindAnserList()
    {
        if (recomment_object_list.Count > 0)
        {
            foreach (GameObject recomment in recomment_object_list)
                recomment.SetActive(false);
        }
        Btn_blind_anser.gameObject.SetActive(false);
        Btn_express_answer.gameObject.SetActive(true);
        express_answer_list.text = "... 답글" + recomment_object_list.Count.ToString() + "개 모두 보기";
    }
    private void OnClickRecomment()
    {
        // 국문 키패드 활성화
        contents.text = "@" + username + " ";
        SetRecommment();
    }
    public void SetRecommment()
    {
        if (state)
        {
            postcommentmanagement.state = !state;
            postcommentmanagement.commentform = this;
        }
        else
        {
            postcommentmanagement.state = !state;
            contents.text = string.Empty;
        }
        state = state == true ? false : true;
    }
    private void OnClickLike()
    {
        // 클릭시 like 데이터 ++ 및 서버로 변경된 데이터 전송
        like_count++;
        like.text = "좋아요 " + like_count.ToString();
        Btn_unlike.gameObject.SetActive(true);
        Btn_like.gameObject.SetActive(false);
    }
    private void OnClickUnLike()
    {
        // 클릭시 like 데이터 -- 및 서버로 변경된 데이터 전송
        like_count--;
        like.text = "좋아요 " + like_count.ToString();

        Btn_like.gameObject.SetActive(true);
        Btn_unlike.gameObject.SetActive(false);
    }
    private void OnClickReport()
    {
        // 신고하기 창 활성화
    }
    private void OnClickDelete()
    {
        comment.text = "삭제된 답글입니다.";
        Btn_like.gameObject.SetActive(false);
        Btn_unlike.gameObject.SetActive(false);
        like.gameObject.SetActive(false);
        Btn_recomment.gameObject.SetActive(false);
        Btn_Delete.gameObject.SetActive(false);
        // 관리자가 클릭할 경우 "관리자가 삭제한 답글입니다." 표시
    }
}
